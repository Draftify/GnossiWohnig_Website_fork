{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { httpsCallable, httpsCallableFromURL, connectFunctionsEmulator } from '@firebase/functions';\nimport { FirebaseError } from '@firebase/util';\nimport { Component } from '@firebase/component';\nconst name = \"@firebase/functions-compat\";\nconst version = \"0.3.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass FunctionsService {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n    this._region = this._delegate.region;\n    this._customDomain = this._delegate.customDomain;\n  }\n  httpsCallable(name, options) {\n    return httpsCallable(this._delegate, name, options);\n  }\n  httpsCallableFromURL(url, options) {\n    return httpsCallableFromURL(this._delegate, url, options);\n  }\n  /**\r\n   * Deprecated in pre-modularized repo, does not exist in modularized\r\n   * functions package, need to convert to \"host\" and \"port\" args that\r\n   * `useFunctionsEmulatorExp` takes.\r\n   * @deprecated\r\n   */\n  useFunctionsEmulator(origin) {\n    const match = origin.match('[a-zA-Z]+://([a-zA-Z0-9.-]+)(?::([0-9]+))?');\n    if (match == null) {\n      throw new FirebaseError('functions', 'No origin provided to useFunctionsEmulator()');\n    }\n    if (match[2] == null) {\n      throw new FirebaseError('functions', 'Port missing in origin provided to useFunctionsEmulator()');\n    }\n    return connectFunctionsEmulator(this._delegate, match[1], Number(match[2]));\n  }\n  useEmulator(host, port) {\n    return connectFunctionsEmulator(this._delegate, host, port);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DEFAULT_REGION = 'us-central1';\nconst factory = (container, _ref) => {\n  let {\n    instanceIdentifier: regionOrCustomDomain\n  } = _ref;\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const functionsServiceExp = container.getProvider('functions').getImmediate({\n    identifier: regionOrCustomDomain !== null && regionOrCustomDomain !== void 0 ? regionOrCustomDomain : DEFAULT_REGION\n  });\n  return new FunctionsService(app, functionsServiceExp);\n};\nfunction registerFunctions() {\n  const namespaceExports = {\n    Functions: FunctionsService\n  };\n  firebase.INTERNAL.registerComponent(new Component('functions-compat', factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setServiceProps(namespaceExports).setMultipleInstances(true));\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nregisterFunctions();\nfirebase.registerVersion(name, version);","map":{"version":3,"sources":["../src/service.ts","../src/register.ts","../src/index.ts"],"names":["httpsCallableExp","httpsCallableFromURLExp","useFunctionsEmulatorExp"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;AAeG;MAaU,gBAAgB,CAAA;EAY3B,WACS,CAAA,GAAgB,EACd,SAA8B,EAAA;IADhC,IAAG,CAAA,GAAA,GAAH,GAAG;IACD,IAAS,CAAA,SAAA,GAAT,SAAS;IAElB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM;IACpC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY;EACjD;EACD,aAAa,CAAC,IAAY,EAAE,OAA8B,EAAA;IACxD,OAAOA,aAAgB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC;EACvD;EACD,oBAAoB,CAClB,GAAW,EACX,OAA8B,EAAA;IAE9B,OAAOC,oBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC;EAC7D;EACD;;;;;AAKG;EACH,oBAAoB,CAAC,MAAc,EAAA;IACjC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,4CAA4C,CAAC;IACxE,IAAI,KAAK,IAAI,IAAI,EAAE;MACjB,MAAM,IAAI,aAAa,CACrB,WAAW,EACX,8CAA8C,CAC/C;IACF;IACD,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;MACpB,MAAM,IAAI,aAAa,CACrB,WAAW,EACX,2DAA2D,CAC5D;IACF;IACD,OAAOC,wBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3E;EACD,WAAW,CAAC,IAAY,EAAE,IAAY,EAAA;IACpC,OAAOA,wBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC;EAC3D;AACF;;ACjFD;;;;;;;;;;;;;;;AAeG;AAYH,MAAM,cAAc,GAAG,aAAa;AAEpC,MAAM,OAAO,GAAwC,CACnD,SAA6B,WAE3B;EAAA,IADF;IAAE,kBAAkB,EAAE;EAAoB,CAA0B;;EAGpE,MAAM,GAAG,GAAG,SAAS,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,YAAY,EAAE;EAC9D,MAAM,mBAAmB,GAAG,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC;IAC1E,UAAU,EAAE,oBAAoB,KAAA,IAAA,IAApB,oBAAoB,KAApB,KAAA,CAAA,GAAA,oBAAoB,GAAI;EACrC,CAAA,CAAC;EAEF,OAAO,IAAI,gBAAgB,CAAC,GAAG,EAAE,mBAAmB,CAAC;AACvD,CAAC;SAEe,iBAAiB,GAAA;EAC/B,MAAM,gBAAgB,GAAG;IACvB,SAAS,EAAE;GACZ;EACA,QAA+B,CAAC,QAAQ,CAAC,iBAAiB,CACzD,IAAI,SAAS,CAAC,kBAAkB,EAAE,OAAO,EAAuB,QAAA,CAAA,2BAAA,CAC7D,eAAe,CAAC,gBAAgB,CAAC,CACjC,oBAAoB,CAAC,IAAI,CAAC,CAC9B;AACH;;ACnDA;;;;;;;;;;;;;;;AAeG;AAOH,iBAAiB,EAAE;AACnB,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseFunctions, HttpsCallable } from '@firebase/functions-types';\nimport {\n  httpsCallable as httpsCallableExp,\n  httpsCallableFromURL as httpsCallableFromURLExp,\n  connectFunctionsEmulator as useFunctionsEmulatorExp,\n  HttpsCallableOptions,\n  Functions as FunctionsServiceExp\n} from '@firebase/functions';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport { FirebaseError } from '@firebase/util';\n\nexport class FunctionsService implements FirebaseFunctions, _FirebaseService {\n  /**\n   * For testing.\n   * @internal\n   */\n  _region: string;\n  /**\n   * For testing.\n   * @internal\n   */\n  _customDomain: string | null;\n\n  constructor(\n    public app: FirebaseApp,\n    readonly _delegate: FunctionsServiceExp\n  ) {\n    this._region = this._delegate.region;\n    this._customDomain = this._delegate.customDomain;\n  }\n  httpsCallable(name: string, options?: HttpsCallableOptions): HttpsCallable {\n    return httpsCallableExp(this._delegate, name, options);\n  }\n  httpsCallableFromURL(\n    url: string,\n    options?: HttpsCallableOptions\n  ): HttpsCallable {\n    return httpsCallableFromURLExp(this._delegate, url, options);\n  }\n  /**\n   * Deprecated in pre-modularized repo, does not exist in modularized\n   * functions package, need to convert to \"host\" and \"port\" args that\n   * `useFunctionsEmulatorExp` takes.\n   * @deprecated\n   */\n  useFunctionsEmulator(origin: string): void {\n    const match = origin.match('[a-zA-Z]+://([a-zA-Z0-9.-]+)(?::([0-9]+))?');\n    if (match == null) {\n      throw new FirebaseError(\n        'functions',\n        'No origin provided to useFunctionsEmulator()'\n      );\n    }\n    if (match[2] == null) {\n      throw new FirebaseError(\n        'functions',\n        'Port missing in origin provided to useFunctionsEmulator()'\n      );\n    }\n    return useFunctionsEmulatorExp(this._delegate, match[1], Number(match[2]));\n  }\n  useEmulator(host: string, port: number): void {\n    return useFunctionsEmulatorExp(this._delegate, host, port);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport { FunctionsService } from './service';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nconst DEFAULT_REGION = 'us-central1';\n\nconst factory: InstanceFactory<'functions-compat'> = (\n  container: ComponentContainer,\n  { instanceIdentifier: regionOrCustomDomain }: InstanceFactoryOptions\n) => {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const functionsServiceExp = container.getProvider('functions').getImmediate({\n    identifier: regionOrCustomDomain ?? DEFAULT_REGION\n  });\n\n  return new FunctionsService(app, functionsServiceExp);\n};\n\nexport function registerFunctions(): void {\n  const namespaceExports = {\n    Functions: FunctionsService\n  };\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component('functions-compat', factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app-compat';\nimport { name, version } from '../package.json';\nimport { registerFunctions } from './register';\nimport * as types from '@firebase/functions-types';\n\nregisterFunctions();\nfirebase.registerVersion(name, version);\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    functions: {\n      (app?: FirebaseApp): types.FirebaseFunctions;\n      Functions: typeof types.FirebaseFunctions;\n    };\n  }\n  interface FirebaseApp {\n    functions(regionOrCustomDomain?: string): types.FirebaseFunctions;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}